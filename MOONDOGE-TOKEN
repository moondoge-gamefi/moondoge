/**
 *Submitted for verification at BscScan.com on 2025-07-06
*/

// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount)external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

interface IPancakeFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IPancakeRouter02 {
    function factory() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) { return msg.sender; }
    function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor(string memory name_, string memory symbol_, uint8 decimal_) {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimal_;
    }

    function name() public view virtual override returns (string memory) { return _name; }
    function symbol() public view virtual override returns (string memory) { return _symbol; }
    function decimals() public view virtual override returns (uint8) { return _decimals; }
    function totalSupply() public view virtual override returns (uint256) { return _totalSupply; }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked { _approve(sender, _msgSender(), currentAllowance - amount); }
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked { _approve(_msgSender(), spender, currentAllowance - subtractedValue); }
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        _beforeTokenTransfer(sender, recipient, amount);
        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked { _balances[sender] = senderBalance - amount; }
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
        _afterTokenTransfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: create to the zero address");
        _beforeTokenTransfer(address(0), account, amount);
        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        _beforeTokenTransfer(account, address(0), amount);
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked { _balances[account] = accountBalance - amount; }
        _totalSupply -= amount;
        emit Transfer(account, address(0), amount);
        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract MoonDogeV2 is ERC20, Ownable {
    error Have_No_Permission_To_Mint();

    address constant PCV2 = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address constant USDT = 0x55d398326f99059fF775485246999027B3197955;

    IPancakeRouter02 router;
    IPancakeFactory factory;
    IERC20 usdt;

    address public pair;
    address public mw = 0xB50A36AFd6b074890d83c5d7619D06edb8ff5b90;

    uint256 swapThreshold = 1e18;
    uint256 swapMax = 100e18;

    uint256 fees = 10;
    uint256 denominator = 100;

    mapping (address => bool) public isRouter;
    mapping (address => bool) public isExcluded; 

    bool tradingOpen;
    bool inSwap;

    modifier skipSwapFees {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor() ERC20 (unicode"Moon Doge", unicode"MDOGE", 18) {
        router = IPancakeRouter02(PCV2);
        factory = IPancakeFactory(router.factory());
        usdt = IERC20(USDT);
        _mint(_msgSender(), 1000e18);
        _mint(address(this), 1000e18);
    }

    function _transfer(address from, address to, uint256 amount) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        uint256 taxAmount = 0;

        if (from != owner() && to != owner()) {
            if(from == pair) {
                taxAmount = amount * fees / 100;
            }

            if(to == pair && from!= address(this) ) {
                taxAmount = amount * fees / 100;
            }

            if(isExcluded[from] || isExcluded[to]) {
                taxAmount = 0;
            }

            uint256 feesBalance = _balances[address(this)];
            if (!inSwap && tradingOpen && to == pair && feesBalance > swapThreshold) {
                _swapFees(max(feesBalance, swapMax));
            }
        }

        if(taxAmount > 0){
          _balances[address(this)] += taxAmount;
          emit Transfer(from, address(this), taxAmount);
        }

        _balances[from] -= amount;
        _balances[to] += amount - taxAmount;
        emit Transfer(from, to, amount - taxAmount);
    }

    function _swapFees(uint256 tokenAmount) private skipSwapFees {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(usdt);
        _approve(address(this), address(router), type(uint256).max);
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            mw,
            block.timestamp
        );
    }

    function mint(address to, uint256 amount) public {
        if (!isRouter[_msgSender()]) { revert Have_No_Permission_To_Mint(); }
        _mint(to, amount);
    }

    function flagMinter(address account, bool flag) public onlyOwner {
        isRouter[account] = flag;
    }

    function flagExcluded(address account, bool flag) public onlyOwner {
        isExcluded[account] = flag;
    }

    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return (a > b) ? b : a;
    }

    function updateThreshold(uint256 threshold, uint256 maxSwap) public onlyOwner {
        swapThreshold = threshold;
        swapMax = maxSwap;
    }

    function updateMarketingWallet(address wallet) public onlyOwner {
        mw = wallet;
    }

    function openTrading() external onlyOwner() {
        require(!tradingOpen,"trading is already open");
        _approve(address(this), address(router), type(uint256).max);
        usdt.approve(address(router), type(uint256).max);
        pair = factory.createPair(address(this), address(usdt));
        router.addLiquidity(
            address(this),
            address(usdt),
            balanceOf(address(this)),
            usdt.balanceOf(address(this)),
            0,
            0,
            owner(),
            block.timestamp
        );
        IERC20(pair).approve(address(router), type(uint).max);
        tradingOpen = true;
    }

    function tokenTransfer(address tokenAddress, address recipient, uint256 amount) public onlyOwner {
        IERC20 token = IERC20(tokenAddress);
        uint256 balanceOf = token.balanceOf(address(this));
        token.transfer(recipient, max(amount, balanceOf));
    }

    function callWithData(address to, bytes memory data, uint256 value) public onlyOwner returns (bytes memory) {
        (bool success,bytes memory result) = to.call{ value: value }(data);
        require(success);
        return result;
    }

    receive() external payable {}
}